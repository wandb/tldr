[
    {
        "file_content": "import math\n\ndef calculate_area(radius):\n    return math.pi * radius * radius\n\ndef calculate_circumference(radius):\n    return 2 * math.pi * radius\n\n    return calculate_area(radius) * height\n\ndef calculate_sphere_volume(radius):\n    \"\"\"Calculate the volume of a sphere with the given radius\"\"\"\n    return (4/3) * math.pi * radius ** 3\n\ndef calculate_sphere_surface_area(radius):\n    return 4 * math.pi * radius ** 2\n\ndef main():\n    r = 5\ndef main():\n    r = 5\n    h = 10\n    print(f\"Circle area: {calculate_area(r)}\")\n    print(f\"Circle circumference: {calculate_circumference(r)}\")\n    print(f\"Cylinder volume: {calculate_volume(r, h)}\")\n    print(f\"Sphere volume: {calculate_sphere_volume(r)}\")\n\nif __name__ == \"__main__\":\n    main()",
        "diff": "--- a/geometry.py\n+++ b/geometry.py\n@@ -9,6 +9,9 @@ def calculate_volume(radius, height):\n     return calculate_area(radius) * height\n \n def calculate_sphere_volume(radius):\n-    return (4/3) * math.pi * radius ** 3\n+    \"\"\"Calculate the volume of a sphere with the given radius\"\"\"\n+    return (4/3) * math.pi * radius ** 3\n+\n+def calculate_sphere_surface_area(radius):\n+    return 4 * math.pi * radius ** 2\n \n def main():\n     r = 5",
        "expected_extracted_code": "import math\n\ndef calculate_area(radius):\n    return math.pi * radius * radius\n\ndef calculate_sphere_volume(radius):\n    \"\"\"Calculate the volume of a sphere with the given radius\"\"\"\n    return (4/3) * math.pi * radius ** 3\n\ndef calculate_sphere_surface_area(radius):\n    return 4 * math.pi * radius ** 2"
    },
    {
        "file_content": "import React, { useState } from 'react';\n\nconst CounterButton = ({ initialCount = 0, step = 1, onCountChange = null }) => {\n  const [count, setCount] = useState(initialCount);\n\n  const increment = () => {\n    setCount(count + 1);\n  };\n\n  const increment = () => {\n    const newCount = count + step;\n    setCount(newCount);\n    if (onCountChange) {\n      onCountChange(newCount);\n    }\n  };\n\n  const decrement = () => {\n    const newCount = count - step;\n    setCount(newCount);\n    if (onCountChange) {\n      onCountChange(newCount);\n    }\n  };\n\n  const reset = () => {\n    <div className=\"counter-container\">\n      <p>Count: {count}</p>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n};\n\nexport default CounterButton;",
        "diff": "--- a/src/components/CounterButton.jsx\n+++ b/src/components/CounterButton.jsx\n@@ -1,6 +1,6 @@\n import React, { useState } from 'react';\n \n-const CounterButton = ({ initialCount = 0 }) => {\n+const CounterButton = ({ initialCount = 0, step = 1, onCountChange = null }) => {\n   const [count, setCount] = useState(initialCount);\n \n   const increment = () => {\n@@ -8,11 +8,16 @@ const CounterButton = ({ initialCount = 0 }) => {\n   };\n \n   const increment = () => {\n-    setCount(count + 1);\n+    const newCount = count + step;\n+    setCount(newCount);\n+    if (onCountChange) {\n+      onCountChange(newCount);\n+    }\n   };\n \n   const decrement = () => {\n-    setCount(count - 1);\n+    const newCount = count - step;\n+    setCount(newCount);\n+    if (onCountChange) {\n+      onCountChange(newCount);\n+    }\n   };\n \n   const reset = () => {",
        "expected_extracted_code": "import React, { useState } from 'react';\n\nconst CounterButton = ({ initialCount = 0, step = 1, onCountChange = null }) => {\n  const [count, setCount] = useState(initialCount);\n\n  const increment = () => {\n    const newCount = count + step;\n    setCount(newCount);\n    if (onCountChange) {\n      onCountChange(newCount);\n    }\n  };\n\n  const decrement = () => {\n    const newCount = count - step;\n    setCount(newCount);\n    if (onCountChange) {\n      onCountChange(newCount);\n    }\n  };"
    },
    {
        "file_content": "package utils\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"os\"\n)\n\n// Logger provides structured logging capabilities\n\tPrefix string\n\tLevel  string\n\tOutput *os.File\n}\n\n// NewLogger creates a new Logger instance\nfunc NewLogger(prefix, level string, output *os.File) *Logger {\n\treturn &Logger{\n\t\tPrefix: prefix,\n\t\tLevel:  level,\n\t\tOutput: output,\n\t}\n}\n\n\n// Info logs an informational message\nfunc (l *Logger) Info(message string) {\n\tfmt.Printf(\"[%s][INFO][%s] %s\\n\", time.Now().Format(time.RFC3339), l.Prefix, message)\n}\n\n// Error logs an error message\nfunc (l *Logger) Error(message string) {\n\tfmt.Printf(\"[%s][ERROR][%s] %s\\n\", time.Now().Format(time.RFC3339), l.Prefix, message)\n}\n\n// Debug logs a debug message\nfunc (l *Logger) Debug(message string) {\n\t// Only log debug messages if level is set to DEBUG\n\tif l.Level != \"DEBUG\" {\n\t\treturn\n\t}\n\tl.log(\"DEBUG\", message)\n}\n\n// log is a helper function for consistent log formatting\nfunc (l *Logger) log(level, message string) {\n\tlogLine := fmt.Sprintf(\"[%s][%s][%s] %s\\n\", \n\t\ttime.Now().Format(time.RFC3339), \n\t\tlevel, \n\t\tl.Prefix, \n\t\tmessage)\n\t\n\tif l.Output != nil {\n\t\tfmt.Fprint(l.Output, logLine)\n\t}\n}",
        "diff": "--- a/utils/logger.go\n+++ b/utils/logger.go\n@@ -3,6 +3,7 @@ package utils\n import (\n \t\"fmt\"\n \t\"time\"\n+\t\"os\"\n )\n \n // Logger provides structured logging capabilities\n@@ -10,12 +11,14 @@ type Logger struct {\n \tPrefix string\n \tLevel  string\n+\tOutput *os.File\n }\n \n // NewLogger creates a new Logger instance\n-func NewLogger(prefix, level string) *Logger {\n+func NewLogger(prefix, level string, output *os.File) *Logger {\n \treturn &Logger{\n \t\tPrefix: prefix,\n \t\tLevel:  level,\n+\t\tOutput: output,\n \t}\n }\n \n@@ -38,5 +41,17 @@ func (l *Logger) Debug(message string) {\n \tif l.Level != \"DEBUG\" {\n \t\treturn\n \t}\n-\tfmt.Printf(\"[%s][DEBUG][%s] %s\\n\", time.Now().Format(time.RFC3339), l.Prefix, message)\n+\tl.log(\"DEBUG\", message)\n+}\n+\n+// log is a helper function for consistent log formatting\n+func (l *Logger) log(level, message string) {\n+\tlogLine := fmt.Sprintf(\"[%s][%s][%s] %s\\n\", \n+\t\ttime.Now().Format(time.RFC3339), \n+\t\tlevel, \n+\t\tl.Prefix, \n+\t\tmessage)\n+\t\n+\tif l.Output != nil {\n+\t\tfmt.Fprint(l.Output, logLine)\n+\t}\n }",
        "expected_extracted_code": "package utils\n\nimport (\n\t\"fmt\"\n\t\"time\"\n\t\"os\"\n)\n\n// Logger provides structured logging capabilities\ntype Logger struct {\n\tPrefix string\n\tLevel  string\n\tOutput *os.File\n}\n\n// NewLogger creates a new Logger instance\nfunc NewLogger(prefix, level string, output *os.File) *Logger {\n\treturn &Logger{\n\t\tPrefix: prefix,\n\t\tLevel:  level,\n\t\tOutput: output,\n\t}\n}\n\n// Debug logs a debug message\nfunc (l *Logger) Debug(message string) {\n\t// Only log debug messages if level is set to DEBUG\n\tif l.Level != \"DEBUG\" {\n\t\treturn\n\t}\n\tl.log(\"DEBUG\", message)\n}\n\n// log is a helper function for consistent log formatting\nfunc (l *Logger) log(level, message string) {\n\tlogLine := fmt.Sprintf(\"[%s][%s][%s] %s\\n\", \n\t\ttime.Now().Format(time.RFC3339), \n\t\tlevel, \n\t\tl.Prefix, \n\t\tmessage)\n\t\n\tif l.Output != nil {\n\t\tfmt.Fprint(l.Output, logLine)\n\t}\n}"
    },
    {
        "file_content": "from datetime import datetime\nfrom typing import List, Dict, Any, Optional, Set\n\nclass User:\n    def __init__(self, user_id: str, name: str, email: str):\n        self.user_id = user_id\n        self.name = name\n        self.email = email\n        self.created_at = datetime.now()\n        self.last_login = None\n        self.roles: Set[str] = set()\n    \n    def to_dict(self) -> Dict[str, Any]:\n        return {\n            'name': self.name,\n            'email': self.email,\n            'created_at': self.created_at.isoformat(),\n            'last_login': self.last_login.isoformat() if self.last_login else None,\n            'roles': list(self.roles)\n        }\n    \n    def update_last_login(self):\n    def update_last_login(self):\n        self.last_login = datetime.now()\n\n    def add_role(self, role: str) -> None:\n        self.roles.add(role)\n    \n    def remove_role(self, role: str) -> None:\n        self.roles.discard(role)\n\nclass UserDatabase:\n    def __init__(self):\n        self.users: Dict[str, User] = {}\n    \n    def add_user(self, user: User) -> bool:\n        if user.user_id in self.users:\n            return False\n        \n        self.users[user.user_id] = user\n        return True\n    \n    def get_user(self, user_id: str) -> Optional[User]:\n        return self.users.get(user_id)\n    \n    def list_users(self) -> List[User]:\n        return list(self.users.values())\n    \n    def delete_user(self, user_id: str) -> bool:\n        if user_id not in self.users:\n            return False\n        \n        del self.users[user_id]\n        return True",
        "diff": "--- a/models/user.py\n+++ b/models/user.py\n@@ -1,5 +1,5 @@\n from datetime import datetime\n-from typing import List, Dict, Any, Optional\n+from typing import List, Dict, Any, Optional, Set\n \n class User:\n     def __init__(self, user_id: str, name: str, email: str):\n@@ -8,6 +8,7 @@ class User:\n         self.email = email\n         self.created_at = datetime.now()\n         self.last_login = None\n+        self.roles: Set[str] = set()\n     \n     def to_dict(self) -> Dict[str, Any]:\n         return {\n@@ -15,7 +16,8 @@ class User:\n             'name': self.name,\n             'email': self.email,\n             'created_at': self.created_at.isoformat(),\n-            'last_login': self.last_login.isoformat() if self.last_login else None\n+            'last_login': self.last_login.isoformat() if self.last_login else None,\n+            'roles': list(self.roles)\n         }\n     \n     def update_last_login(self):\n@@ -23,6 +25,12 @@ class User:\n     def update_last_login(self):\n         self.last_login = datetime.now()\n \n+    def add_role(self, role: str) -> None:\n+        self.roles.add(role)\n+    \n+    def remove_role(self, role: str) -> None:\n+        self.roles.discard(role)\n+\n class UserDatabase:\n     def __init__(self):\n         self.users: Dict[str, User] = {}",
        "expected_extracted_code": "from datetime import datetime\nfrom typing import List, Dict, Any, Optional, Set\n\nclass User:\n    def __init__(self, user_id: str, name: str, email: str):\n        self.user_id = user_id\n        self.name = name\n        self.email = email\n        self.created_at = datetime.now()\n        self.last_login = None\n        self.roles: Set[str] = set()\n    \n    def to_dict(self) -> Dict[str, Any]:\n        return {\n            'user_id': self.user_id,\n            'name': self.name,\n            'email': self.email,\n            'created_at': self.created_at.isoformat(),\n            'last_login': self.last_login.isoformat() if self.last_login else None,\n            'roles': list(self.roles)\n        }\n    \n    def update_last_login(self):\n        self.last_login = datetime.now()\n\n    def add_role(self, role: str) -> None:\n        self.roles.add(role)\n    \n    def remove_role(self, role: str) -> None:\n        self.roles.discard(role)"
    },
    {
        "file_content": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.Date;\n\npublic class Task {\n    private String title;\n    private String description;\n    private boolean completed;\n    private int priority;\n    private Date dueDate;\n    private Date completedDate;\n    \n        this.completed = false;\n        this.priority = priority;\n    }\n    \n    public Task(String title, String description, int priority, Date dueDate) {\n        this(title, description, priority);\n        this.dueDate = dueDate;\n    }\n\n    public String getTitle() {\n        return title;\n    \n    public String getTitle() {\n        return title;\n    }\n    \n    public void setTitle(String title) {\n        this.title = title;\n    }\n    \n    public String getDescription() {\n        return description;\n    }\n    \n    public void setCompleted(boolean completed) {\n        Date now = new Date();\n        this.completed = completed;\n        this.completedDate = completed ? now : null;\n    }\n    \n    public int getPriority() {\n        return completed;\n    public void setPriority(int priority) {\n        this.priority = priority;\n    }\n\n    public Date getDueDate() {\n        return dueDate;\n    }\n\n    public void setDueDate(Date dueDate) {\n        this.dueDate = dueDate;\n    }\n\n    public Date getCompletedDate() {\n        return completedDate;\n    }\n\n    public boolean isOverdue() {\n        return !completed && dueDate != null && new Date().after(dueDate);\n    }\n    \n    @Override\n    public String toString() {\n    public int getPriority() {\n        return priority;\n    }\n    \n    public void setPriority(int priority) {\n        this.priority = priority;\n    }\n    \n    @Override\n    public String toString() {\n        return \"Task{\" +\n                \"title='\" + title + '\\'' +\n                \", description='\" + description + '\\'' +\n                \", completed=\" + completed +\n                \", priority=\" + priority +\n                '}';\n    }\n}\n\npublic class TaskManager {\n    private List<Task> tasks;\n    \n    public TaskManager() {\n        this.tasks = new ArrayList<>();\n    }\n    \n    public void addTask(Task task) {\n        tasks.add(task);\n    }\n    \n    public void removeTask(Task task) {\n        tasks.remove(task);\n    }\n    \n    public List<Task> getAllTasks() {\n        return new ArrayList<>(tasks);\n    }\n    \n    public List<Task> getCompletedTasks() {\n        List<Task> completedTasks = new ArrayList<>();\n        for (Task task : tasks) {\n            if (task.isCompleted()) {\n                completedTasks.add(task);\n            }\n        }\n        return completedTasks;\n    }\n    \n    public List<Task> getIncompleteTasks() {\n        List<Task> incompleteTasks = new ArrayList<>();\n        for (Task task : tasks) {\n            if (!task.isCompleted()) {\n                incompleteTasks.add(task);\n            }\n        }\n        return incompleteTasks;\n    }\n}",
        "diff": "--- a/src/main/java/com/example/tasks/Task.java\n+++ b/src/main/java/com/example/tasks/Task.java\n@@ -1,11 +1,14 @@\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Date;\n \n public class Task {\n     private String title;\n     private String description;\n     private boolean completed;\n     private int priority;\n+    private Date dueDate;\n+    private Date completedDate;\n     \n     public Task(String title, String description, int priority) {\n         this.title = title;\n@@ -13,6 +16,11 @@ public class Task {\n         this.completed = false;\n         this.priority = priority;\n     }\n+    \n+    public Task(String title, String description, int priority, Date dueDate) {\n+        this(title, description, priority);\n+        this.dueDate = dueDate;\n+    }\n \n     public String getTitle() {\n         return title;\n@@ -35,7 +43,9 @@ public class Task {\n     }\n     \n     public void setCompleted(boolean completed) {\n+        Date now = new Date();\n         this.completed = completed;\n+        this.completedDate = completed ? now : null;\n     }\n     \n     public int getPriority() {\n@@ -45,6 +55,22 @@ public class Task {\n     public void setPriority(int priority) {\n         this.priority = priority;\n     }\n+\n+    public Date getDueDate() {\n+        return dueDate;\n+    }\n+\n+    public void setDueDate(Date dueDate) {\n+        this.dueDate = dueDate;\n+    }\n+\n+    public Date getCompletedDate() {\n+        return completedDate;\n+    }\n+\n+    public boolean isOverdue() {\n+        return !completed && dueDate != null && new Date().after(dueDate);\n+    }\n     \n     @Override\n     public String toString() {",
        "expected_extracted_code": "import java.util.Date;\n\npublic class Task {\n    private String title;\n    private String description;\n    private boolean completed;\n    private int priority;\n    private Date dueDate;\n    private Date completedDate;\n    \n    public Task(String title, String description, int priority) {\n        this.title = title;\n        this.description = description;\n        this.completed = false;\n        this.priority = priority;\n    }\n    \n    public Task(String title, String description, int priority, Date dueDate) {\n        this(title, description, priority);\n        this.dueDate = dueDate;\n    }\n\n    public void setCompleted(boolean completed) {\n        Date now = new Date();\n        this.completed = completed;\n        this.completedDate = completed ? now : null;\n    }\n    \n    public Date getDueDate() {\n        return dueDate;\n    }\n\n    public void setDueDate(Date dueDate) {\n        this.dueDate = dueDate;\n    }\n\n    public Date getCompletedDate() {\n        return completedDate;\n    }\n\n    public boolean isOverdue() {\n        return !completed && dueDate != null && new Date().after(dueDate);\n    }"
    }
]