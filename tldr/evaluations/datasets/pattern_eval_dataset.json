[
    {
        "diff_content": "--- a/script.py\n+++ b/script.py\n@@ -1 +1 @@\n-def old_function():\n     pass\n \n+def new_helper_function():\n+    print(\"hello\")\n+\n def another_function():\n     pass\n",
        "expected_patterns": [
            "new_helper_function"
        ]
    },
    {
        "diff_content": "--- a/another_file.txt\n+++ b/another_file.txt\n@@ -1 +1 @@\n-old text\n+new important keyword\n",
        "expected_patterns": ["new important keyword"]
    },
    {
        "diff_content": "--- a/main.go\n+++ b/main.go\n@@ -5,6 +5,12 @@ import (\n \t\"fmt\"\n )\n \n+func fetchUserData(userID string) (map[string]string, error) {\n+\tdata := make(map[string]string)\n+\tdata[\"name\"] = \"User \" + userID\n+\treturn data, nil\n+}\n+\n func main() {\n \tfmt.Println(\"Hello World\")\n }\n",
        "expected_patterns": [
            "fetchUserData"
        ]
    },
    {
        "diff_content": "--- a/types.go\n+++ b/types.go\n@@ -10,4 +10,10 @@ type User struct {\n \tEmail    string\n }\n \n+// UserResponse represents the API response format\n+type UserResponse struct {\n+\tSuccess bool   `json:\"success\"`\n+\tUser    *User  `json:\"user,omitempty\"`\n+\tError   string `json:\"error,omitempty\"`\n+}\n+\n",
        "expected_patterns": [
            "UserResponse"
        ]
    },
    {
        "diff_content": "--- a/components/Button.tsx\n+++ b/components/Button.tsx\n@@ -1,6 +1,13 @@\n import React from 'react';\n \n-const Button = ({ label, onClick }) => {\n+interface ButtonProps {\n+  label: string;\n+  onClick: () => void;\n+  variant?: 'primary' | 'secondary';\n+  disabled?: boolean;\n+}\n+\n+const Button: React.FC<ButtonProps> = ({ label, onClick, variant = 'primary', disabled = false }) => {\n   return (\n     <button onClick={onClick}>{label}</button>\n   );\n",
        "expected_patterns": [
            "ButtonProps"
        ]
    },
    {
        "diff_content": "--- a/hooks/useAuth.ts\n+++ b/hooks/useAuth.ts\n@@ -10,6 +10,11 @@ export const useAuth = () => {\n     // Implementation\n   }\n \n+  const refreshToken = async (): Promise<boolean> => {\n+    // Implementation for token refresh\n+    return true;\n+  }\n+\n   return {\n     user,\n     login,\n@@ -18,5 +23,6 @@ export const useAuth = () => {\n     isAuthenticated,\n     isLoading,\n     error,\n+    refreshToken,\n   };\n };\n",
        "expected_patterns": [
            "refreshToken"
        ]
    },
    {
        "diff_content": "--- a/Makefile\n+++ b/Makefile\n@@ -1,4 +1,5 @@\n BUILD_DIR = build\n+ENV = development\n \n .PHONY: all clean build\n \n@@ -8,6 +9,11 @@ clean:\n \trm -rf $(BUILD_DIR)\n \n build: clean\n-\tmkdir -p $(BUILD_DIR)\n-\tgo build -o $(BUILD_DIR)/app\n+\tmkdir -p $(BUILD_DIR)\n+\tgo build -o $(BUILD_DIR)/app -tags=$(ENV)\n+\n+test-coverage:\n+\tgo test -coverprofile=coverage.out ./...\n+\tgo tool cover -html=coverage.out -o coverage.html\n+\topen coverage.html\n",
        "expected_patterns": [
            "ENV = development",
            "test-coverage"
        ]
    }
]   